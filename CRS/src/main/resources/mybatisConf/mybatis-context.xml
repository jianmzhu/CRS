<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc"  
	xsi:schemaLocation="  
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd  
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd  
            http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd  
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	
    <!-- 自动扫描com.alex.springmvc.mybatis下注解的服务类 -->
    <context:component-scan base-package="cn.crs.common" />  

	<!--本示例采用DBCP连接池，应预先把DBCP的jar包复制到工程的lib目录下。 -->
	<!-- <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:jdbc.properties" />  
    </bean>   -->
    
    <!-- 引入缓存的配置文件properties -->  
    <!-- 第一种方法：@Value("#{systemConfigProperties[pageRecord]}") 可以引用这样子 -->
    
    <!-- 1.配置数据库相关参数properties的属性：${url} -->
	<!-- <context:property-placeholder location="classpath:jdbc.properties" />
	<bean 
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath:system_config.properties</value>
			</list>
		</property>
	</bean> -->
    
    <!-- 第二种方法：@Value("${pageRecord}") 可以引用这样子 -->
    <bean  id="systemConfigProperties" 
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="ignoreResourceNotFound" value="true" />  
        <property name="ignoreUnresolvablePlaceholders" value="true" />  
        <property name="locations">  
            <list>  
                <!-- 此位置是相对于:部署后的项目根路径 -->  
                <!-- <value>/WEB-INF/cache.properties</value> -->  
                <!-- 此位置是相对于:文件直接在src 目录下 -->  
                <!-- <value>classpath*:cache.properties</value> -->  
                <!-- 此位置是相对于:文件在目录下面 -->  
                <!-- <value>classpath*:cache/cache.properties</value> -->  
                <value>classpath:database.properties</value>  
                <value>classpath:system_config.properties</value>
                <!-- 此位置是从服务器环境变量中查找名为：XXX 的值(例如：file:D:/test/test.properties) -->  
                <!-- <value>${XXX}</value> -->  
                <!-- 此位置是相对于:文件系统 -->  
                <!-- <value>file:D:/test/test.properties</value> -->  
            </list>  
        </property>
        <property name="fileEncoding">
            <value>UTF-8</value>
        </property>  
    </bean> 
	<!-- 数据源配置 类使用org.apache.commons.dbcp.BasicDataSource -->
	<!-- 数据源配置 类使用com.mchange.v2.c3p0.ComboPooledDataSource c3p0的连接池 -->
	 <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">  
        <!-- 配置连接池属性 -->
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
       	<!-- c3p0连接池的私有属性 -->
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<!-- 关闭连接后不自动commit -->
		<property name="autoCommitOnClose" value="${jdbc.autoCommitOnClose}" />
		<!-- 获取连接超时时间 -->
		<property name="checkoutTimeout" value="${jdbc.checkoutTimeout}" />
		<!-- 当获取连接失败重试次数 -->
		<property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}" />
    </bean>  

	<!-- 配置MyBatis的SqlSessionFactoryBean，指定dataSource -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--dataSource属性指定要用到的连接池-->
		<property name="dataSource" ref="dataSource" />
		<!--configLocation属性指定mybatis的配置文件-->
		<property name="configLocation" value="classpath:mybatisConf/mybatis-config.xml" />
		<!-- 所有配置的mapper文件 -->
		<!-- 
			classpath 和 classpath* 区别： 
			classpath：只会到你的class路径中查找找文件; 
			classpath*：不仅包含class路径，还包括jar文件中(class路径)进行查找. 
		 -->
		<!-- 指定mapper.xml存放地址 -->
		<!-- 扫描entity包 使用别名 -->
		<!-- <property name="typeAliasesPackage" value="cn.crs.reserve.entity" /> -->
		<property name="mapperLocations" value="classpath:mybatisMapper/*.xml" />
		<!-- <property name="mapperLocations" value="classpath:com/alex/springmvc/mybatis/mapping/*.xml" /> -->
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 ,包下的类需要使用@MapperScan注解,否则容器注入会失败 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 指定Mapper类地址，该处basePackage只需要填写包路径，不需要写入类名 -->
        <property name="basePackage" value="cn.crs.reserve.dao" />
        <!-- 使用SqlSessionFactoryBean -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
    
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>   -->  
</beans> 